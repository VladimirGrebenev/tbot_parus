from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import (InlineKeyboardMarkup, InlineKeyboardButton,
                           ReplyKeyboardRemove)

import database
from keyboards import *
from config import ADMIN_CHAT_ID


##### –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ ########################

# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞
class PlumberState(StatesGroup):
    specialist = State()
    street = State()
    house = State()
    flat = State()
    problem = State()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
async def call_bid_plumber(callback_query: types.CallbackQuery, state: FSMContext):

    specialist = '—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞'
    await state.update_data(specialist=specialist)

    # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —É–ª–∏—Ü
    question_text = "–í—ã–±–µ—Ä–∏—Ç–µ —É–ª–∏—Ü—É, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞:"
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —É–ª–∏—Ü
    streets = database.get_streets()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–ª–∏—Ü–∞–º–∏
    street_keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [InlineKeyboardButton(text=street, callback_data=street) for
               street in streets]
    street_keyboard.add(*buttons)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PlumberState
    await callback_query.message.answer(text=question_text,
                                        reply_markup=street_keyboard)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PlumberState
    await PlumberState.street.set()

async def call_bid_electrician(callback_query: types.CallbackQuery, state: FSMContext):

    specialist = '—ç–ª–µ–∫—Ç—Ä–∏–∫–∞'
    await state.update_data(specialist=specialist)

    # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —É–ª–∏—Ü
    question_text = "–í—ã–±–µ—Ä–∏—Ç–µ —É–ª–∏—Ü—É, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–∑–≤–∞—Ç—å —ç–ª–µ–∫—Ç—Ä–∏–∫–∞':"
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —É–ª–∏—Ü
    streets = database.get_streets()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–ª–∏—Ü–∞–º–∏
    street_keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [InlineKeyboardButton(text=street, callback_data=street) for
               street in streets]
    street_keyboard.add(*buttons)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PlumberState
    await callback_query.message.answer(text=question_text,
                                        reply_markup=street_keyboard)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PlumberState
    await PlumberState.street.set()



async def call_bid_other(callback_query: types.CallbackQuery, state:
FSMContext):

    specialist = '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞'
    await state.update_data(specialist=specialist)

    # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —É–ª–∏—Ü
    question_text = "–í—ã–±–µ—Ä–∏—Ç–µ —É–ª–∏—Ü—É, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–∑–≤–∞—Ç—å —ç–ª–µ–∫—Ç—Ä–∏–∫–∞':"
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —É–ª–∏—Ü
    streets = database.get_streets()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–ª–∏—Ü–∞–º–∏
    street_keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [InlineKeyboardButton(text=street, callback_data=street) for
               street in streets]
    street_keyboard.add(*buttons)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PlumberState
    await callback_query.message.answer(text=question_text,
                                        reply_markup=street_keyboard)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PlumberState
    await PlumberState.street.set()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —É–ª–∏—Ü—ã
async def call_street_selected(callback_query: types.CallbackQuery,
                               state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É–ª–∏—Ü–µ
    street = callback_query.data
    await state.update_data(street=street)

    # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –¥–æ–º–æ–≤
    question_text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞:"
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –¥–æ–º–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É–ª–∏—Ü–µ
    houses = database.get_houses_for_steet(street)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ –¥–æ–º–æ–≤ –ø–æ —É–ª–∏—Ü–µ
    houses_keyboard = InlineKeyboardMarkup(row_width=3)
    buttons = [InlineKeyboardButton(text=house, callback_data=house) for
               house in houses]
    houses_keyboard.add(*buttons)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback_query.message.answer(text=question_text,
                                        reply_markup=houses_keyboard)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PlumberState
    await PlumberState.house.set()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞
async def call_house_selected(callback_query: types.CallbackQuery, state: FSMContext):
    house = callback_query.data
    await state.update_data(house=house)

    # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã
    question_text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã:"
    await callback_query.message.answer(text=question_text,
                         reply_markup=ReplyKeyboardRemove())

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PlumberState
    await PlumberState.flat.set()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
async def flat_input_handler(message: types.Message, state: FSMContext):
    flat = message.text
    await state.update_data(flat=flat)

    # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    question_text = "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:"
    await message.answer(text=question_text,
                         reply_markup=ReplyKeyboardRemove())

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PlumberState
    await PlumberState.problem.set()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
async def problem_input_handler(message: types.Message, state: FSMContext):
    problem = message.text
    await state.update_data(problem=problem)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–º –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã
    user = message.from_user

    data = await state.get_data()
    street = data.get("street")
    house = data.get("house")
    bid_flat = data.get("flat")
    specialist = data.get("specialist")
    bid_address = database.get_address_id(street, house)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    database.save_bid_to_database(specialist, bid_address, bid_flat, problem,
                                  user.id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞—è–≤–∫–µ
    await send_bid_to_admin(user, problem, street, house, bid_flat, specialist)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏
    response_text = f"{user.first_name}, –∑–∞—è–≤–∫—É –Ω–∞ {specialist} –ø—Ä–∏–Ω—è–ª–∏.\n"
    response_text += f"–ê–¥—Ä–µ—Å: {street}, –¥–æ–º {house}, –∫–≤–∞—Ä—Ç–∏—Ä–∞ {bid_flat}.\n"
    response_text += f"–ü—Ä–æ–±–ª–µ–º–∞: {problem}."
    await message.answer(text=response_text, reply_markup=start_kb)
    await state.finish()



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def send_bid_to_admin(user, problem, street, house, flat, specialist):
    from main import bot
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞—è–≤–∫–µ
    message_text = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ {specialist} –æ—Ç @{user.username}.\n"
    message_text += f"–ê–¥—Ä–µ—Å: {street}, –¥–æ–º {house}, –∫–≤–∞—Ä—Ç–∏—Ä–∞ {flat}.\n"
    message_text += f"–ü—Ä–æ–±–ª–µ–º–∞: {problem}."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=message_text)

##################################
