# –ê–¥–º–∏–Ω–∫–∞
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types
from aiogram.dispatcher import FSMContext

import database
import texts.admin
from config import admins_list
from database import *
from keyboards import *


# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É /admin
async def admin_entry(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ admins
    if message.from_user.id in admins_list:
        # –ï—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
        await message.answer("–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                             parse_mode="HTML", reply_markup=admin_panel_kb)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≥–æ–≤–æ—Ä–∏–º –æ–± —ç—Ç–æ–º
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", parse_mode="HTML",
                             reply_markup=None)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üë®‚Äçüë©‚Äçüë¶‚Äçüë¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
async def call_users(call: types.CallbackQuery):
    # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø–∏—Å–∞–Ω–Ω—É—é —Ä–∞–Ω–µ–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –≤—ã–≤–æ–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
    await call.message.answer(show_users(), reply_markup=back_to_admin_kb)
    await call.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
async def call_statistics(call: types.CallbackQuery):
    # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø–∏—Å–∞–Ω–Ω—É—é —Ä–∞–Ω–µ–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await call.message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {show_statistics()}",
                              reply_markup=back_to_admin_kb)
    await call.answer()


# –°–æ–∑–¥–∞–¥–∏–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ id
class AdminState(StatesGroup):
    BAN = State()
    UNBAN = State()
    ADD_HOUSE = State()
    mailing_step1 = State()
    mailing_step2 = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚õîÔ∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞"
async def call_ban_user(call: types.CallbackQuery):
    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    await call.message.answer(texts.admin.ban_from_admin_start,
                              parse_mode="HTML",
                              reply_markup=types.ReplyKeyboardRemove())
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await call.answer()
    await AdminState.BAN.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º id –¥–ª—è –±–ª–æ–∫–∏—Ä–≤–æ–∫–∏
async def add_to_ban(message: types.Message, state: FSMContext):
    from main import bot

    text = message.text

    if text == '/cancel':
        await message.answer(texts.admin.ban_from_admin_cancel,
                             reply_markup=admin_panel_kb)
        await state.finish()
        return

    if text.isdigit():
        id_to_ban = int(text)
        try:
            await bot.send_message(id_to_ban, texts.admin.ban)
        except Exception as e:
            print(e)
        database.add_user_to_block(id_to_ban)
        await message.answer(texts.admin.ban_from_admin_finaly,
                             parse_mode='HTML', reply_markup=admin_panel_kb)
        await state.reset_state()
    else:
        await message.answer(texts.admin.ban_from_admin_except,
                             parse_mode='HTML')


async def call_back_admin(call: types.CallbackQuery):
    await call.message.edit_text(texts.admin.start, parse_mode="HTML",
                                 reply_markup=admin_panel_kb)
    await call.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞"
async def call_unlock_user(call: types.CallbackQuery):
    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    await call.message.answer(texts.admin.unban_from_admin_start,
                              parse_mode="HTML",
                              reply_markup=types.ReplyKeyboardRemove())
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await call.answer()
    await AdminState.UNBAN.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º id –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
async def unban(message: types.Message, state: FSMContext):
    from main import bot

    text = message.text
    if text == '/cancel':
        await message.answer(texts.admin.unban_from_admin_cancel,
                             reply_markup=admin_panel_kb)
        await state.finish()
        return

    if text.isdigit():
        id_to_unban = int(text)
        try:
            await bot.send_message(id_to_unban, texts.admin.unban)
        except Exception as e:
            print(e)
        database.unlock_users(id_to_unban)
        await message.answer(texts.admin.unban_from_admin_finaly,
                             parse_mode='HTML', reply_markup=admin_panel_kb)
        await state.finish()
    else:
        await message.answer(texts.admin.ban_from_admin_except,
                             parse_mode='HTML')


async def call_add_house_callback(callback_query: types.CallbackQuery):
    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞ –≤ "
                                        "—Ñ–æ—Ä–º–∞—Ç–µ '–£–ª–∏—Ü–∞, –ù–æ–º–µ—Ä –¥–æ–º–∞':",
                                        reply_markup=types.ReplyKeyboardRemove())
    await AdminState.ADD_HOUSE.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–∞
async def process_add_house(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    input_data = message.text

    # –†–∞–∑–¥–µ–ª—è–µ–º —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞ –ø–æ –∑–∞–ø—è—Ç–æ–π
    data_parts = input_data.split(',')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è
    if len(data_parts) != 2:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä "
                             "–¥–æ–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–£–ª–∏—Ü–∞, –ù–æ–º–µ—Ä –¥–æ–º–∞'.", )
        return

    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    street = data_parts[0].strip()
    house_number = data_parts[1].strip()

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –¥–æ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    database.add_house(street, house_number)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    await message.answer(f"–î–æ–º '{street}, {house_number}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.",
                         reply_markup=admin_panel_kb)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


async def mailing(call: types.CallbackQuery):
    instructions = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"
    await call.message.answer(instructions,
                              reply_markup=types.ReplyKeyboardRemove())
    await call.answer()
    await AdminState.mailing_step1.set()


async def mailing1(message, state):
    await state.update_data(text=message.text)

    instructions = "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫ —Å–æ–æ–±—â–µ–Ω–∏—é:"
    await message.answer(text=instructions)

    await AdminState.mailing_step2.set()


async def mailing2(message, state):
    from main import bot

    await message.photo[-1].download(destination_file='files/photo.jpg')
    data = await state.get_data()
    subscribers = database.users_id()

    c = 0
    for (user_id,) in subscribers:
        try:
            with open('files/photo.jpg', 'rb') as f:
                await bot.send_photo(user_id, f, data['text'])
            c += 1
        except Exception as e:
            print(e)

    await message.answer(
        f'–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {c} / {database.show_statistics()}',
        reply_markup=admin_panel_kb)
    await state.finish()
